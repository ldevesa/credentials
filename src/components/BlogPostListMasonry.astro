---
import type { CollectionEntry } from "astro:content";
import Card from "./CardMasonry.astro";
import Link from "./Link.astro";

/* export type Props = {
  posts: CollectionEntry<'blog'>[];
  start?: number;
}; */

interface Props {
  posts: CollectionEntry<"blog">[];
  start?: number;
}

const { posts, start = 1 } = Astro.props;
//console.log('Astro.url.pathname', Astro.url.pathname)


// Alternativa: Detecci√≥n Basada en Entorno
const basePath = import.meta.env.MODE === 'production' ? '../blog' : './blog';
console.log('Current mode:', import.meta.env.MODE);
---

<ol
  class="w-fit mx-auto grid grid-cols-1 lg:grid-cols-3 md:grid-cols-2 justify-items-center justify-center gap-4 mt-10 mb-5"
  x-data
  x-masonry
  x-init="$nextTick(() => window.dispatchEvent(new Event('reload:masonry')))"
  start={start}
  style="grid-template-rows: auto;"
>
  {
    posts.map((post) => (
      <li class="w-full h-fit">
        <Card
          {...post.data}
          body={post.data.author}
          date={post.data.publishDate.toLocaleDateString("en", {
            year: "numeric",
            month: "short",
            day: "numeric",
          })}
          href={`${basePath}/${post.slug.split('/')[1]}`}
        />
      </li>
    ))
  }
</ol>


<!-- <script is:inline src="https://unpkg.com/alpinejs-masonry@latest/dist/masonry.min.js"></script> -->
<script is:inline>
(() => {
  function initializeMasonry(container) {
    if (!container) return;
    let gap = parseFloat(getComputedStyle(container).gap);
    let items = [...container.childNodes].filter(node => node.nodeType === 1 && node.tagName !== "TEMPLATE");
    let columns = getComputedStyle(container).gridTemplateColumns.split(" ").length;

    items.forEach(item => item.style.removeProperty("margin-top"));

    if (columns === 1) return;

    items.forEach((item, index) => {
      let prevItem = items[index - columns];
      if (!prevItem) return;

      let top = item.getBoundingClientRect().top;
      let bottom = prevItem.getBoundingClientRect().bottom;
      let offset = top - bottom;

      if (offset !== gap) {
        item.style.marginTop = `-${offset - gap}px`;
      }
    });
  }

  function setupMasonry() {
    const containers = document.querySelectorAll('[x-masonry]');
    if (containers.length === 0) {
      console.warn("No Masonry containers found.");
      return;
    }

    containers.forEach(container => {
      initializeMasonry(container);
    });
  }

  // Reinitialize Masonry on `astro:page-load`
  document.addEventListener('astro:page-load', () => {
    console.log('Astro page loaded, reinitializing Masonry...');
    setupMasonry();
  });

  // Initialize Masonry on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded, initializing Masonry...');
    setupMasonry();
  });

  // Optional: Retry initialization in case of delayed rendering
  setTimeout(setupMasonry, 500);
})();

</script>
